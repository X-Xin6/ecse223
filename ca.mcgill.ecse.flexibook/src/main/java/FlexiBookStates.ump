
class Appointment {

depend java.util.*;
depend ca.mcgill.ecse.flexibook.util.SystemTime;
depend java.time.LocalTime;
depend java.sql.Time;
  
  appointmentStatus {
    Booked{
      
      updateAppointment(TimeSlot timeslot, BookableService newBookableService, List<ComboItem> optionalService) [OneDayDiff()] / {
        doUpdateAppointment(timeslot, newBookableService, optionalService);
      } -> Booked;
      
      cancelAppointment() [OneDayDiff()] / {
        doCancelAppointment();
      } -> Final;
     
      ownerCancelAppointment() [isWithinAppTimeSlot()||isAfterAppTimeSlot()] / {
        doCancelAppointmentO();
      } -> Final;
      
      startAppointment(Owner owner) [isWithinAppTimeSlot()] / {
        doStartAppointment(owner);
      } -> InProgress;
      
    }
    
    InProgress{
      updateAppointment(TimeSlot timeslot, BookableService newBookableService, List<ComboItem> optionalService) [isWithinAppTimeSlot()] / {
          doUpdateAppointment(timeslot, newBookableService, optionalService);
      } -> InProgress;
      
      endAppointment() / {
        doEndAppointment();
      } -> Final;
      
    }
  }
  
  private void doUpdateAppointment(TimeSlot timeslot, BookableService newBookableService, List<ComboItem> optionalService) {
  	 if(!(this.getTimeSlot().getStartTime().equals(timeslot.getStartTime()))){
     Boolean check = false;
	try {
    	check = availableTimeSlot(timeslot);
    }
    catch(RuntimeException e) {
    	if(e != null) {
    		throw new RuntimeException("unsuccessful");
    	}
    }
	
    if(check == false) {
    	throw new RuntimeException("unsuccessful");
    }
    }
	
	this.setTimeSlot(timeslot);
	if(this.getBookableService() instanceof ServiceCombo) {
		if(this.getAppointmentInProgress() == false) {
				this.setBookableService(newBookableService);
				List<ComboItem> a = this.getChosenItems();
				for(ComboItem c : a) {
					c.delete();
				}
				for(ComboItem newC : optionalService) {
					this.addChosenItem(newC);
				}
			}
			else {
				List<ComboItem> a = this.getChosenItems();
				for(ComboItem c : a) {
					c.delete();
				}
				for(ComboItem newC : optionalService) {
					this.addChosenItem(newC);
				}
				if(newBookableService != null) {
				}
			}
		}
		else if(this.getBookableService() instanceof ServiceCombo) {
			if(this.getAppointmentInProgress() == true) {
			}
			if(optionalService != null) {
			}
			else {
				this.setBookableService(newBookableService);
			}
		}
  }
  
  
  //Author: Haipeng Yue
  private Boolean availableTimeSlot(TimeSlot newslot) {
  	
  	Boolean check = false;
	FlexiBook fb = this.getFlexiBook();
	Service service = (Service) this.getBookableService();
	Time startTime = this.getTimeSlot().getStartTime();

	for(TimeSlot slot : fb.getBusiness().getHolidays()) {
		if(!isNoOverlap(newslot,slot)) {
			throw new RuntimeException("unsuccessful");
		}
	}
	for(Appointment appointment : fb.getAppointments()) {
		if(appointment != this) {
			if(appointment.getBookableService() instanceof Service) {
				Service s = (Service) appointment.getBookableService();
				TimeSlot slot = appointment.getTimeSlot();
				if(s.getDowntimeStart() == 0) {
					if(!isNoOverlap(newslot,slot)) {
						throw new RuntimeException("unsuccessful");
					}
				}
				else {
					LocalTime ST = appointment.getTimeSlot().getStartTime().toLocalTime().plusMinutes(service.getDowntimeStart());
					LocalTime endTime = ST.plusMinutes(service.getDowntimeDuration());
					Time start = Time.valueOf(ST);
					Time end = Time.valueOf(endTime);
					TimeSlot TS = new TimeSlot(appointment.getTimeSlot().getStartDate(), start, appointment.getTimeSlot().getStartDate(), end, fb);
					if(!isNoOverlap(newslot, slot)) {
						if(isFullyCovered(newslot, TS)) {
							check = true;
						}
						else {
							throw new RuntimeException("unsuccessful");
						}
					}
				}

			}
		}
	}
	for(Appointment app : fb.getAppointments()) {
		if(app.getBookableService() instanceof ServiceCombo) {
			boolean successful = false;
			List<TimeSlot> dtTS = new ArrayList<TimeSlot>();
			ServiceCombo combo = (ServiceCombo) app.getBookableService();
			int min = 0;
			for (ComboItem item : combo.getServices()) {
				Service s = item.getService();
				min += s.getDuration(); 
				if(s.getDowntimeDuration() != 0) {
					min -= s.getDuration();
					LocalTime ST = app.getTimeSlot().getStartTime().toLocalTime().plusMinutes(s.getDowntimeStart() + min);
					LocalTime endTime = ST.plusMinutes(s.getDowntimeDuration());
					Time start = Time.valueOf(ST);
					Time end = Time.valueOf(endTime);
					TimeSlot TS = new TimeSlot(app.getTimeSlot().getStartDate(), start, app.getTimeSlot().getStartDate(), end, fb);
					dtTS.add(TS);
				}
			}
			for(TimeSlot t : dtTS) {
				if(!isNoOverlap(newslot, t)) {
					if(isFullyCovered(newslot, t)) {
						check = true;
						successful = true;
					}
				}
			}
			
			if(!(isNoOverlap(app.getTimeSlot(), newslot)) && successful == false) {
				throw new RuntimeException("unsuccessful");
			}
		}
	}
	check = true;
	return check;
  }
  
  private Boolean OneDayDiff() {
  
  	String sDate = SystemTime.getdate(SystemTime.getSysTime());
	String date = this.getTimeSlot().getStartDate().toString();
	   
	if(date.equals(sDate)) {
		return false;
	}
	else {
		return true;
	}
  }
  
  private Boolean isWithinAppTimeSlot() {
  	
  	String st = this.getTimeSlot().getStartTime().toLocalTime().toString();
	String systemTimeRN = SystemTime.gettime(SystemTime.getSysTime());
	String endTime = this.getTimeSlot().getEndTime().toLocalTime().toString();
	   
	int a = SystemTime.comparetime(st, systemTimeRN);
	int b = SystemTime.comparetime(endTime, systemTimeRN);
	   
	if(a == 0 || b == 0) {
		return true;
	}
	else if(a == 1) {
		return false;
	}
	else if(a == 2 && b == 1) {
		return true;
	}
	else {
		return false;
	}
  } 
  private Boolean isAfterAppTimeSlot(){
	String systemTimeRN = SystemTime.gettime(SystemTime.getSysTime());
	String endTime = this.getTimeSlot().getEndTime().toLocalTime().toString();
	int b = SystemTime.comparetime(endTime, systemTimeRN);
	if(b==2){
	return true;
	}
	else{ 
	return false;
	}
  }
  
  private void doCancelAppointment() {
  	if(OneDayDiff() == true) {
		this.delete();
	}
  }
  
  private void doCancelAppointmentO() {
	Customer a = this.getCustomer();
	int noShowCountOld = a.getNoShowCount();
	a.setNoShowCount(noShowCountOld + 1);
	this.setNoShowCheck(true);
	this.delete();
  }
  
  private void doStartAppointment(Owner owner) {
  	if(owner != null) {
		this.setAppointmentInProgress(true);
	}
	else {
		throw new RuntimeException("You are not the owner of the Flexibook");
	}
  }
          
  private void doEndAppointment() {
  	this.setAppointmentInProgress(false);
  	this.delete();
  
  }
  
  public static boolean isNoOverlap(TimeSlot t1, TimeSlot t2) {
		if(t1.getStartDate().equals(t2.getStartDate())) {
			if(t1.getEndTime().before(t2.getStartTime()) || 
					t2.getEndTime().before(t1.getStartTime())) {
				//is not overlap
				return true;
			}else {
				return false;
			}
		}
		return true;
	}
	
	public static boolean isFullyCovered(TimeSlot t1, TimeSlot t2) {
		if(t1.getStartDate().equals(t2.getStartDate())) {
			if(t1.getEndTime().before(t2.getEndTime()) && 
					t1.getStartTime().after(t2.getStartTime())) {
				return true;
			}
			else {
				return false;
			}
		}
		else {
			return false;
		}

	}
  
}